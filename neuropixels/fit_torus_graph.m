% Torus graph model fitting and bootstrapping using Octave or Matlab
% Loads phase files computed by fit_gpcsd2d.py

% Clone torus graphs from https://github.com/natalieklein/torus-graphs
% For Octave (warning: slower than Matlab):
%   Switch to octave branch:
%       git checkout octave
%   See octave_setup.m in torus-graphs directory for dependencies

pkg load statistics
pkg load mapping

addpath(genpath('torus-graphs/'))

% Load files generated by fit_gpcsd_baseline.py
load('neuropixel_csd_V1_phases.mat');
theta_phases_v1 = theta;
beta_phases_v1 = beta;

load('neuropixel_csd_LM_phases.mat');
theta_phases_lm = theta;
beta_phases_lm = beta;

theta_phases = [theta_phases_v1; theta_phases_lm]; % (8, 2, 129)
beta_phases = [beta_phases_v1; beta_phases_lm]; 

% fit phase differences submodels
submodels = false(1,3);
submodels(1,2) = true;

% theta
[TG, edges, phi_hat, inference] = torus_graphs(squeeze(theta_phases(:, 1, :)), [], [], submodels);
theta_pvals_t0 = edges.p_vals;
fprintf('theta t=0 CSD TG has %d edges alpha=0.001\n', sum(theta_pvals_t0 < 0.001))
phi_hat_theta_t0 = phi_hat;

[TG, edges, phi_hat, inference] = torus_graphs(squeeze(theta_phases(:, 2, :)), [], [], submodels);
theta_pvals_t70 = edges.p_vals;
fprintf('theta t=70 CSD TG has %d edges alpha=0.001\n', sum(theta_pvals_t70 < 0.001))
phi_hat_theta_t70 = phi_hat;

% beta
[TG, edges, phi_hat, inference] = torus_graphs(squeeze(beta_phases(:, 1, :)), [], [], submodels);
beta_pvals_t0 = edges.p_vals;
fprintf('beta t=0 CSD TG has %d edges alpha=0.001\n', sum(beta_pvals_t0 < 0.001))
phi_hat_beta_t0 = phi_hat;

[TG, edges, phi_hat, inference] = torus_graphs(squeeze(beta_phases(:, 2, :)), [], [], submodels);
beta_pvals_t70 = edges.p_vals;
fprintf('beta t=70 CSD TG has %d edges 0.001\n', sum(beta_pvals_t70 < 0.001))
phi_hat_beta_t70 = phi_hat;

% Save results
theta_pvals = [theta_pvals_t0, theta_pvals_t70];
theta_phi = [phi_hat_theta_t0, phi_hat_theta_t70];
beta_pvals = [beta_pvals_t0, beta_pvals_t70];
beta_phi = [phi_hat_beta_t0, phi_hat_beta_t70];
save('neuropixel_tg.mat','theta_pvals','beta_pvals','theta_phi','beta_phi', '-v7')

% bootstrap
ntrials = size(theta_phases, 3);
nboot = 1000
% theta t=0
partial_plv_csd_theta_t0 = zeros(28, nboot);
partial_plv_csd_theta_t70 = zeros(28, nboot);
partial_plv_csd_beta_t0 = zeros(28, nboot);
partial_plv_csd_beta_t70 = zeros(28, nboot);
for bi = 1:nboot
    fprintf('bootstrap sample %d of %d\n', bi, nboot)
    binds = randsample(ntrials, ntrials, true);
    [TG, edges, phi_hat, inference] = torus_graphs(squeeze(theta_phases(:, 1, binds)), [], [], submodels);
    partial_plv_csd_theta_t0(:, bi) = edges.cond_coupling_coeff;
    [TG, edges, phi_hat, inference] = torus_graphs(squeeze(theta_phases(:, 2, binds)), [], [], submodels);
    partial_plv_csd_theta_t70(:, bi) = edges.cond_coupling_coeff;
    [TG, edges, phi_hat, inference] = torus_graphs(squeeze(beta_phases(:, 1, binds)), [], [], submodels);
    partial_plv_csd_beta_t0(:, bi) = edges.cond_coupling_coeff;
    [TG, edges, phi_hat, inference] = torus_graphs(squeeze(beta_phases(:, 2, binds)), [], [], submodels);
    partial_plv_csd_beta_t70(:, bi) = edges.cond_coupling_coeff;
end
pplv_theta = cat(3, partial_plv_csd_theta_t0, partial_plv_csd_theta_t70);
pplv_beta = cat(3, partial_plv_csd_beta_t0, partial_plv_csd_beta_t70);
save('bootstrap_neuropixels.mat',  'pplv_theta', 'pplv_beta', '-v7')